// <auto-generated>
//     This code was generated by a tool.
//
//     Project name:    TigerWrapToolkit
//     Source database: TigerWrapDb
//     Timestamp:       2025-07-07 15:24:31
//     Tool name:       TigerWrap
//     Tool database:   TigerWrapDb
//     Tool version:    0.8.7
//     Tool URL:        https://github.com/rkozlowski/TigerWrap
//
//     Changes to this file may cause incorrect behavior 
//     and will be lost if the code is regenerated.
// </auto-generated>

using System.Data;
using System.Data.Common;
using System.Threading;
using Microsoft.Data.SqlClient;
using Microsoft.Data.SqlClient.Server;
using Dapper;

namespace ItTiger.TigerWrap.Core
{
    public partial class ToolkitDbHelper
    {


        // Wrapper method for a stored procedure: [Toolkit].[AddProjectEnumMapping]
        public async Task<(
            int ReturnValue,
            int? Id,
            string ErrorMessage
        )> AddProjectEnumMappingAsync(
            short? projectId,
            string schema,
            ToolkitDbHelper.NameMatch? nameMatchId,
            string namePattern,
            string escChar,
            bool? isSetOfFlags,
            string nameColumn,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@schema", schema);
            p.Add("@nameMatchId", (byte?) nameMatchId);
            p.Add("@namePattern", namePattern);
            p.Add("@escChar", escChar);
            p.Add("@isSetOfFlags", isSetOfFlags);
            p.Add("@nameColumn", nameColumn);
            p.Add("@id", null, DbType.Int32, ParameterDirection.Output, null, null, null);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 8000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[AddProjectEnumMapping]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.AddProjectEnumMapping), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var id = p.Get<int?>("@id");
            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                id,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[AddProjectNameNormalization]
        public async Task<(
            int ReturnValue,
            int? Id,
            string ErrorMessage
        )> AddProjectNameNormalizationAsync(
            short? projectId,
            string namePart,
            ToolkitDbHelper.NamePartType? namePartTypeId,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@namePart", namePart);
            p.Add("@namePartTypeId", (byte?) namePartTypeId);
            p.Add("@id", null, DbType.Int32, ParameterDirection.Output, null, null, null);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 8000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[AddProjectNameNormalization]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.AddProjectNameNormalization), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var id = p.Get<int?>("@id");
            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                id,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[AddProjectStoredProcMapping]
        public async Task<(
            int ReturnValue,
            int? Id,
            string ErrorMessage
        )> AddProjectStoredProcMappingAsync(
            short? projectId,
            string schema,
            ToolkitDbHelper.NameMatch? nameMatchId,
            string namePattern,
            string escChar,
            long? languageOptionsReset,
            long? languageOptionsSet,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@schema", schema);
            p.Add("@nameMatchId", (byte?) nameMatchId);
            p.Add("@namePattern", namePattern);
            p.Add("@escChar", escChar);
            p.Add("@languageOptionsReset", languageOptionsReset);
            p.Add("@languageOptionsSet", languageOptionsSet);
            p.Add("@id", null, DbType.Int32, ParameterDirection.Output, null, null, null);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 8000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[AddProjectStoredProcMapping]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.AddProjectStoredProcMapping), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var id = p.Get<int?>("@id");
            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                id,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[CreateProject]
        public async Task<(
            int ReturnValue,
            short? ProjectId,
            string ErrorMessage
        )> CreateProjectAsync(
            string name,
            string namespaceName,
            string className,
            ToolkitDbHelper.ClassAccess? classAccessId,
            ToolkitDbHelper.Language? languageId,
            ToolkitDbHelper.ParamEnumMapping? paramEnumMappingId,
            bool? mapResultSetEnums,
            long? languageOptions,
            string defaultDatabase,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@name", name);
            p.Add("@namespaceName", namespaceName);
            p.Add("@className", className);
            p.Add("@classAccessId", (byte?) classAccessId);
            p.Add("@languageId", (byte?) languageId);
            p.Add("@paramEnumMappingId", (byte?) paramEnumMappingId);
            p.Add("@mapResultSetEnums", mapResultSetEnums);
            p.Add("@languageOptions", languageOptions);
            p.Add("@defaultDatabase", defaultDatabase);
            p.Add("@projectId", null, DbType.Int16, ParameterDirection.Output, null, null, null);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 4000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[CreateProject]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.CreateProject), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var projectId = p.Get<short?>("@projectId");
            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                projectId,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[GenerateCode]
        public async Task<(
            IList<GenerateCodeResult> Result,
            int ReturnValue,
            string ErrorMessage
        )> GenerateCodeAsync(
            short? projectId,
            string databaseName,
            ToolkitDbHelper.LoggingLevel? loggingLevelId,
            CancellationToken cancellationToken = default
        )
        {
            IList<GenerateCodeResult> result;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@databaseName", databaseName);
            p.Add("@loggingLevelId", (byte?) loggingLevelId);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 4000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GenerateCode]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GenerateCode), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GenerateCodeResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }
            var returnValue = p.Get<int>("@returnValue");

            var errorMessage = p.Get<string>("@errorMessage");
            return (
                result,
                returnValue,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetAllProjects]
        public async Task<
            IList<GetAllProjectsResult>
        > GetAllProjectsAsync(
            CancellationToken cancellationToken = default
        )
        {
            IList<GetAllProjectsResult> result;
            var p = new DynamicParameters();


            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetAllProjects]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetAllProjects), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetAllProjectsResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetDbInfo]
        public async Task<(
            int ReturnValue,
            string DbName,
            string Version,
            byte? ApiLevel,
            byte? MinApiLevel
        )> GetDbInfoAsync(
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@dbName", null, DbType.String, ParameterDirection.Output, 256, null, null);
            p.Add("@version", null, DbType.String, ParameterDirection.Output, 100, null, null);
            p.Add("@apiLevel", null, DbType.Byte, ParameterDirection.Output, null, null, null);
            p.Add("@minApiLevel", null, DbType.Byte, ParameterDirection.Output, null, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetDbInfo]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetDbInfo), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var dbName = p.Get<string>("@dbName");
            var version = p.Get<string>("@version");
            var apiLevel = p.Get<byte?>("@apiLevel");
            var minApiLevel = p.Get<byte?>("@minApiLevel");
            return (
                returnValue,
                dbName,
                version,
                apiLevel,
                minApiLevel
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetLanguageOptions]
        public async Task<
            IList<GetLanguageOptionsResult>
        > GetLanguageOptionsAsync(
            ToolkitDbHelper.Language? languageId,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetLanguageOptionsResult> result;
            var p = new DynamicParameters();

            p.Add("@languageId", (byte?) languageId);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetLanguageOptions]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetLanguageOptions), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetLanguageOptionsResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetLanguages]
        public async Task<
            IList<GetLanguagesResult>
        > GetLanguagesAsync(
            CancellationToken cancellationToken = default
        )
        {
            IList<GetLanguagesResult> result;
            var p = new DynamicParameters();


            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetLanguages]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetLanguages), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetLanguagesResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectDbSchemaEnumCandidates]
        public async Task<
            IList<GetProjectDbSchemaEnumCandidatesResult>
        > GetProjectDbSchemaEnumCandidatesAsync(
            short? projectId,
            string schema,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetProjectDbSchemaEnumCandidatesResult> result;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@schema", schema);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectDbSchemaEnumCandidates]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectDbSchemaEnumCandidates), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetProjectDbSchemaEnumCandidatesResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectDbSchemaProcs]
        public async Task<
            IList<GetProjectDbSchemaProcsResult>
        > GetProjectDbSchemaProcsAsync(
            short? projectId,
            string schema,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetProjectDbSchemaProcsResult> result;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@schema", schema);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectDbSchemaProcs]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectDbSchemaProcs), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetProjectDbSchemaProcsResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectDbSchemas]
        public async Task<
            IList<GetProjectDbSchemasResult>
        > GetProjectDbSchemasAsync(
            short? projectId,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetProjectDbSchemasResult> result;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectDbSchemas]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectDbSchemas), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetProjectDbSchemasResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectDetails]
        public async Task<(
            int ReturnValue,
            short? ProjectId,
            ToolkitDbHelper.Language? LanguageId,
            string DefaultDatabase,
            string ClassName,
            string NamespaceName,
            ToolkitDbHelper.ClassAccess? ClassAccessId,
            long? LanguageOptions,
            ToolkitDbHelper.ParamEnumMapping? ParamEnumMappingId,
            bool? MapResultSetEnums,
            string ErrorMessage
        )> GetProjectDetailsAsync(
            string projectName,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectName", projectName);
            p.Add("@projectId", null, DbType.Int16, ParameterDirection.Output, null, null, null);
            p.Add("@languageId", null, DbType.Byte, ParameterDirection.Output, null, null, null);
            p.Add("@defaultDatabase", null, DbType.String, ParameterDirection.Output, 256, null, null);
            p.Add("@className", null, DbType.AnsiString, ParameterDirection.Output, 100, null, null);
            p.Add("@namespaceName", null, DbType.AnsiString, ParameterDirection.Output, 100, null, null);
            p.Add("@classAccessId", null, DbType.Byte, ParameterDirection.Output, null, null, null);
            p.Add("@languageOptions", null, DbType.Int64, ParameterDirection.Output, null, null, null);
            p.Add("@paramEnumMappingId", null, DbType.Byte, ParameterDirection.Output, null, null, null);
            p.Add("@mapResultSetEnums", null, DbType.Boolean, ParameterDirection.Output, null, null, null);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 4000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectDetails]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectDetails), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var projectId = p.Get<short?>("@projectId");
            var languageId = (ToolkitDbHelper.Language?) p.Get<byte?>("@languageId");
            var defaultDatabase = p.Get<string>("@defaultDatabase");
            var className = p.Get<string>("@className");
            var namespaceName = p.Get<string>("@namespaceName");
            var classAccessId = (ToolkitDbHelper.ClassAccess?) p.Get<byte?>("@classAccessId");
            var languageOptions = p.Get<long?>("@languageOptions");
            var paramEnumMappingId = (ToolkitDbHelper.ParamEnumMapping?) p.Get<byte?>("@paramEnumMappingId");
            var mapResultSetEnums = p.Get<bool?>("@mapResultSetEnums");
            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                projectId,
                languageId,
                defaultDatabase,
                className,
                namespaceName,
                classAccessId,
                languageOptions,
                paramEnumMappingId,
                mapResultSetEnums,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectEnumMappings]
        public async Task<
            IList<GetProjectEnumMappingsResult>
        > GetProjectEnumMappingsAsync(
            short? projectId,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetProjectEnumMappingsResult> result;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectEnumMappings]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectEnumMappings), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetProjectEnumMappingsResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectId]
        public async Task<(
            int ReturnValue,
            short? ProjectId,
            string ErrorMessage
        )> GetProjectIdAsync(
            string name,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@name", name);
            p.Add("@projectId", null, DbType.Int16, ParameterDirection.Output, null, null, null);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 4000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectId]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectId), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var projectId = p.Get<short?>("@projectId");
            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                projectId,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectInfo]
        public async Task<(
            int ReturnValue,
            short? ProjectId,
            ToolkitDbHelper.Language? LanguageId,
            string DefaultDatabase,
            string ClassName,
            string ErrorMessage
        )> GetProjectInfoAsync(
            string projectName,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectName", projectName);
            p.Add("@projectId", null, DbType.Int16, ParameterDirection.Output, null, null, null);
            p.Add("@languageId", null, DbType.Byte, ParameterDirection.Output, null, null, null);
            p.Add("@defaultDatabase", null, DbType.String, ParameterDirection.Output, 256, null, null);
            p.Add("@className", null, DbType.AnsiString, ParameterDirection.Output, 100, null, null);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 4000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectInfo]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectInfo), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var projectId = p.Get<short?>("@projectId");
            var languageId = (ToolkitDbHelper.Language?) p.Get<byte?>("@languageId");
            var defaultDatabase = p.Get<string>("@defaultDatabase");
            var className = p.Get<string>("@className");
            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                projectId,
                languageId,
                defaultDatabase,
                className,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectNameNormalizations]
        public async Task<
            IList<GetProjectNameNormalizationsResult>
        > GetProjectNameNormalizationsAsync(
            short? projectId,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetProjectNameNormalizationsResult> result;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectNameNormalizations]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectNameNormalizations), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetProjectNameNormalizationsResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjects]
        public async Task<
            IList<GetProjectsResult>
        > GetProjectsAsync(
            ToolkitDbHelper.Language? languageId,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetProjectsResult> result;
            var p = new DynamicParameters();

            p.Add("@languageId", (byte?) languageId);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjects]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjects), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetProjectsResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetProjectStoredProcedureMappings]
        public async Task<
            IList<GetProjectStoredProcedureMappingsResult>
        > GetProjectStoredProcedureMappingsAsync(
            short? projectId,
            CancellationToken cancellationToken = default
        )
        {
            IList<GetProjectStoredProcedureMappingsResult> result;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetProjectStoredProcedureMappings]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetProjectStoredProcedureMappings), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetProjectStoredProcedureMappingsResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[GetResponseCodes]
        public async Task<
            IList<GetResponseCodesResult>
        > GetResponseCodesAsync(
            CancellationToken cancellationToken = default
        )
        {
            IList<GetResponseCodesResult> result;
            var p = new DynamicParameters();


            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[GetResponseCodes]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.GetResponseCodes), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                var queryResult = await connection.QueryAsync<GetResponseCodesResult>(command);
                connection.Close();
                result = queryResult.ToList();
            }

            return 
                result
            ;
        }


        // Wrapper method for a stored procedure: [Toolkit].[RemoveProjectEnumMapping]
        public async Task<(
            int ReturnValue,
            string ErrorMessage
        )> RemoveProjectEnumMappingAsync(
            short? projectId,
            int? enumMappingId,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@enumMappingId", enumMappingId);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 8000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[RemoveProjectEnumMapping]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.RemoveProjectEnumMapping), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[RemoveProjectNameNormalization]
        public async Task<(
            int ReturnValue,
            string ErrorMessage
        )> RemoveProjectNameNormalizationAsync(
            short? projectId,
            int? normalizationId,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@normalizationId", normalizationId);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 8000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[RemoveProjectNameNormalization]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.RemoveProjectNameNormalization), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[RemoveProjectStoredProcMapping]
        public async Task<(
            int ReturnValue,
            string ErrorMessage
        )> RemoveProjectStoredProcMappingAsync(
            short? projectId,
            int? spMappingId,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@spMappingId", spMappingId);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 8000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[RemoveProjectStoredProcMapping]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.RemoveProjectStoredProcMapping), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                errorMessage
            );
        }


        // Wrapper method for a stored procedure: [Toolkit].[UpdateProject]
        public async Task<(
            int ReturnValue,
            string ErrorMessage
        )> UpdateProjectAsync(
            short? projectId,
            string name,
            string namespaceName,
            string className,
            ToolkitDbHelper.ClassAccess? classAccessId,
            ToolkitDbHelper.ParamEnumMapping? paramEnumMappingId,
            bool? mapResultSetEnums,
            long? languageOptions,
            string defaultDatabase,
            CancellationToken cancellationToken = default
        )
        {
            int returnValue;
            var p = new DynamicParameters();

            p.Add("@projectId", projectId);
            p.Add("@name", name);
            p.Add("@namespaceName", namespaceName);
            p.Add("@className", className);
            p.Add("@classAccessId", (byte?) classAccessId);
            p.Add("@paramEnumMappingId", (byte?) paramEnumMappingId);
            p.Add("@mapResultSetEnums", mapResultSetEnums);
            p.Add("@languageOptions", languageOptions);
            p.Add("@defaultDatabase", defaultDatabase);
            p.Add("@errorMessage", null, DbType.String, ParameterDirection.Output, 4000, null, null);
            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
				var command = new CommandDefinition(
				    commandText: "[Toolkit].[UpdateProject]",
				    parameters: p,
				    commandTimeout: GetCommandTimeout(StoredProcedureWrapper.UpdateProject), 
				    commandType: CommandType.StoredProcedure,
				    cancellationToken: cancellationToken
				);
                await connection.ExecuteAsync(command);
                connection.Close();
            }
            returnValue = p.Get<int>("@returnValue");

            var errorMessage = p.Get<string>("@errorMessage");
            return (
                returnValue,
                errorMessage
            );
        }


    }
}
