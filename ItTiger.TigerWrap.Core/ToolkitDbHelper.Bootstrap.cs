// <auto-generated>
//     This code was generated by a tool.
//
//     Project name:    TigerWrapToolkit
//     Source database: TigerWrapDb
//     Timestamp:       2025-07-07 15:24:31
//     Tool name:       TigerWrap
//     Tool database:   TigerWrapDb
//     Tool version:    0.8.7
//     Tool URL:        https://github.com/rkozlowski/TigerWrap
//
//     Changes to this file may cause incorrect behavior 
//     and will be lost if the code is regenerated.
// </auto-generated>

using System.Data;
using System.Data.Common;
using System.Threading;
using Microsoft.Data.SqlClient;
using Microsoft.Data.SqlClient.Server;
using Dapper;

namespace ItTiger.TigerWrap.Core
{
    public partial class ToolkitDbHelper
    {


        public string ConnectionString { get; set; }

        public int DefaultCommandTimeoutSec { get; set; } = 30;
        
        public ToolkitDbHelper(string connectionString = null)
        {
            ConnectionString = connectionString;
        }

        protected virtual DbConnection GetDbConnection()
        {
            return new SqlConnection(ConnectionString);
        }

        [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]
        public class ColumnAttribute : Attribute
        {
            public string Name { get; set; }
        }

        public class WrapperSettings
        {
            public int? CommandTimeoutSec { get; set; } = null;
        }

        public Dictionary<StoredProcedureWrapper, WrapperSettings> StoredProcedureWrapperSettings { get; private set; } = new Dictionary<StoredProcedureWrapper, WrapperSettings>();

        public void SetCommandTimeout(StoredProcedureWrapper wrapper, int commandTimeoutSec)
        {
            if (!StoredProcedureWrapperSettings.ContainsKey(wrapper))
            {
                StoredProcedureWrapperSettings[wrapper] = new WrapperSettings();
            }
            StoredProcedureWrapperSettings[wrapper].CommandTimeoutSec = commandTimeoutSec;
        }

        public int GetCommandTimeout(StoredProcedureWrapper wrapper)
        {
            if (StoredProcedureWrapperSettings.ContainsKey(wrapper) && StoredProcedureWrapperSettings[wrapper].CommandTimeoutSec.HasValue)
            {
                return StoredProcedureWrapperSettings[wrapper].CommandTimeoutSec.Value;
            }
            return DefaultCommandTimeoutSec;
        }

        static ToolkitDbHelper()
        {

            SqlMapper.SetTypeMap(
                typeof(GenerateCodeResult),
                new CustomPropertyTypeMap(
                    typeof(GenerateCodeResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetAllProjectsResult),
                new CustomPropertyTypeMap(
                    typeof(GetAllProjectsResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetLanguageOptionsResult),
                new CustomPropertyTypeMap(
                    typeof(GetLanguageOptionsResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetLanguagesResult),
                new CustomPropertyTypeMap(
                    typeof(GetLanguagesResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetProjectDbSchemaEnumCandidatesResult),
                new CustomPropertyTypeMap(
                    typeof(GetProjectDbSchemaEnumCandidatesResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetProjectDbSchemaProcsResult),
                new CustomPropertyTypeMap(
                    typeof(GetProjectDbSchemaProcsResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetProjectDbSchemasResult),
                new CustomPropertyTypeMap(
                    typeof(GetProjectDbSchemasResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetProjectEnumMappingsResult),
                new CustomPropertyTypeMap(
                    typeof(GetProjectEnumMappingsResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetProjectNameNormalizationsResult),
                new CustomPropertyTypeMap(
                    typeof(GetProjectNameNormalizationsResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetProjectsResult),
                new CustomPropertyTypeMap(
                    typeof(GetProjectsResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetProjectStoredProcedureMappingsResult),
                new CustomPropertyTypeMap(
                    typeof(GetProjectStoredProcedureMappingsResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

            SqlMapper.SetTypeMap(
                typeof(GetResponseCodesResult),
                new CustomPropertyTypeMap(
                    typeof(GetResponseCodesResult),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));

        }


        public enum StoredProcedureWrapper
        {
            AddProjectEnumMapping,
            AddProjectNameNormalization,
            AddProjectStoredProcMapping,
            CreateProject,
            GenerateCode,
            GetAllProjects,
            GetDbInfo,
            GetLanguageOptions,
            GetLanguages,
            GetProjectDbSchemaEnumCandidates,
            GetProjectDbSchemaProcs,
            GetProjectDbSchemas,
            GetProjectDetails,
            GetProjectEnumMappings,
            GetProjectId,
            GetProjectInfo,
            GetProjectNameNormalizations,
            GetProjects,
            GetProjectStoredProcedureMappings,
            GetResponseCodes,
            RemoveProjectEnumMapping,
            RemoveProjectNameNormalization,
            RemoveProjectStoredProcMapping,
            UpdateProject
        }


    }
}
